#summary Detailed design specification

= Design Document: TeamCEG =

<h3>March 13, 2009</h3>

<h3>Identification:</h3>
<p><ul>
<li>Project Name: Pairgramming</li>
<li>Group Member Names: Garrett Marcotte (<i>marcotte</i>), Christina Ilvento (<i>cilvento</i>), Ellen Kim (<i>ellenkim</i>)</li>
<li>Project Manager: Ellen Kim (<i>ellenkim</i>)</li>
<li>URL: http://code.google.com/p/teamceg/</li>
</ul>
</p>


<h3>Primary Goal:</h3>
<p>
	The primary goal of this project is to create a web-based interface for fully collaborative programming.  </p>


<h3>Overview:</h3>
<p>
	Paired programming is a commonly used learning and coding practice introduced and encouraged in COS 126, 226, and 217 at Princeton.  However, students often have difficulty scheduling blocks of time to code together due to their busy schedules.  Pairgramming saves students time by enabling them to pair program remotely.  Pairgramming will save students from hikes out to Friend Center through the snow, and let them work together in spare half hour between classes or before bed.  Pairgramming will also enable Friend 006/007 lab TA's to work from the comfort of their rooms so they can study or do other things if no one needs help.  It will also be easier for professors to answer students' vague questions because they can log in and view the flagged spots in students' code.  </p>
<p>
	Features will include real-time two-way audio communication, a functional console with monospaced font and basic commands (compile, run, debug), an interactive text editor with syntax highlighting, a basic text chat, a revision browser (using Subversion), a collapsible tree-style file navigator, and the ability to "ink" or highlight text.  </p>
<p>
	The most well-known example of a web-based multiple user text editor is Google Documents, where two or more people can log in and edit the same document at the same time, and see changes made by the other users in almost real-time (update times may vary from less than 1 second to almost 1 minute).  However, our text will be updated frequently and consistently enough that the observing partner will be able to watch their partner code.  There are a couple open-source shell emulators online already in use, like by students at the University of Cambridge (???).  However, our shell will also be viewable by the other partner.  </p>
<p>

<h3>User Scenarios:</h3>
	<p><b>New Student, New Project...</b>&nbsp&nbsp
Peng is a student in COS 217.  He is starting the Buffer Overrun assignment with his partner Matt.  He goes to our login page and creates a new username and password with our server.  He verifies his registration by initially using the password we e-mail to him (???).  Then at the login page, Peng enters his partner's username.  The project selection dropdown list does not show any existing projects that he and Matt share because both are new users.  Peng selects "Create new project" at the bottom of the dropdown list.  He also selects his preferences and selects the Class privacy settings, indicating he will allow professors, preceptors, and Friend 006/007 TA's to view the code in this project.  He clicks "Create my project!" and the Pairgramming application comes up.  </p>
	<p><b>Students Pair Programming: Collaborative Mode...</b>&nbsp&nbsp
Christina is a student in COS 126.  She is starting the HelloWorld assignment with her partner Ellen.  She goes to the login page, enters her username, passworld, and partner's name.  She selects HelloWorld from the project selection dropdown list and opens the project.  She logged in before Ellen so she becomes the "driver" (partner who codes) by default.  Ellen logs in by the same protocol from her computer elsewhere.  Christina sees Ellen join the project and clicks to initiate Audio; Ellen sees the flashing popup(???) and confirms.  They greet each other and Christina starts coding.  Ellen can see Christina's typing in the editor and console.  Ellen is tired of hearing Christina's typing and tells her she will mute audio for a while; Christina sees the audio controls flash twice and turn red (gray if audio is for some reason not possible) as Ellen mutes her.  Christina starts playing The Beatles and continues coding.  They communicate via the text chat and highlighting relevant lines.  </p>
	<p><b>Students Pair Programming (cont.): Independent Mode...</b>&nbsp&nbsp
Christina and Ellen decide to split up so Ellen can write a function they need.  Christina, who had been coding in Collaborative Mode, selects Independent Mode.  The layout changes to show Eavesdrop, a small version of their partner's editor window which updates every 10 seconds; the Eavesdrop window shades out gray when their partner is inactive for more than 20 seconds.  Ellen has written and tested the function and tries to edit the main code to use her new function, but sees that she can't open it because Christina is using it.  She lets Christina know she's ready and presses Synch to synchronize her changes with the server's version of the files, and selects "Passenger"(???), then changes her mind and selects "Driver"(USE THIS NAME???) because she wants to code this time.  Christina finishes her statement, clicks Synch, and accepts "Passenger" role.  They are now switched back to Collaborative mode and they continue coding together.  </p>

<h3>Architecture:</h3>

Our application will have two main components: a client-side web application that
the user interacts with via a web browser, and server-side code that the client
applications interacts with via AJAX.  We want our application to be as responsive
as possible, ideally to the point that the user is not consciously aware that he
is using a web application, so the AJAX communication will be of the utmost
importance.

The client-side application will be developed in Python using the Pyjamas toolkit.
An almost exact port of Google Web Toolkit, Pyjamas allows for advanced web interfaces
to be defined in a standard programming language (Python) and then compiled into
Javascript to be run in the user's web browser.  We selected Pyjamas over GWT for three
primary reasons.  First, our server-side code (discussed next) will also be in Python,
and for ease of implementation it made sense to use the same language across our application,
so that we could use the same testing, debugging and style-checking tools for all code.
Second, Pyjamas has an extension called Pyjamas-Desktop (for which no corollary exists in GWT)
that allows a Pyjamas web application to be run as a desktop application, and which could
allow additional functionality and features should we have the time to implement them.  Finally,
GWT did not show any significant advantages over Pyjamas.  They both compile into Javascript, so
performance is not an issue.  Almost all of the GWT tutorials and examples that Google prepared
have been adapted to Pyjamas.  And the development team and use of Pyjamas seems widespread
enough to ensure that the code is stable and functional, and that we will be able to find
documentation and support.

Client-Side Interface (class hierarchy):

Container:
<ul>
 <li>Auto-updates with server to keep content current</li>
 <li>A single region of content in the user's browser</li>
 <li>Can be moved via drag-and-drop or resized</li>
 <li>Can be "popped out" into a new browser window (e.g. for full-screen)</li>
 <li>Can be "flashed" with a blinking color overlay (and optional sound effect) to alert the user to an item of interest.</li>
</ul>

Sketchpad extends Container:
<ul>
 <li>Full-window overlay that allows collaborative drawing/sketching.</li>
 <li>Basic drawing tools: pen width, pen color, eraser, clear</li>
 <li>Drawings can be saved as images to server</li>
</ul>

FileNavigator extends Container:
<ul>
 <li>Expandable tree navigation structure for all files in the project</li>
 <li>Color-coding of files to indicate in-use/modified status</li>
</ul>

ConfigurationPanel extends Container:
<ul>
 <li>Allows user to control the application and customize the interface, with options for:
 <ul>
  <li>Setting the flash color and rate for Containers.</li>
  <li>Turning sound effects on and off.</li>
  <li>Changing the mode of operation (independent, collaborative, sketchpad)</li>
  <li>Opening new projects</li>
  <li>Customizing syntax highlighting</li>
 </ul>
 </li>
</ul>

AudioControl extends Container:
<ul>
 <li>Iconic and color-coded indicators for connectivity</li>
 <li>Sliders and mute buttons for microphone and speaker volume</li>
</ul>

RevisionBrowser extends Container:
<ul>
 <li>Displays summary of all past versions of a selected file</li>
 <li>Allows for reverting, loading diffs, or loading the past revision into a CodeView container</li>
</ul>

TextContainer extends Container:
<ul>
 <li>For displaying text content</li>
 <li>Allows any portion of text to be "highlighted" by any user, which causes that text to be highlighted on the screen of any user with that container open.  Highlighting is color-coded by user.</li>
</ul>

CodeView extends TextContainer:
<ul>
 <li>For displaying significant amounts of code</li>
 <li>Built-in syntax highlighting, determined from filename.</li>
 <li>Monospaced font</li>
 <li>Line numbers</li>
 <li>Not editable</li>
</ul>

CodeEdit extends TextContainer:
<ul>
 <li>Editable</li>
 <li>Auto-saves to a user-level working copy on server periodically</li>
</ul>

TextEntry extends TextContainer:
<ul>
 <li>Has a small box for user to enter text, and a larger non-editable box to show the results of previously entered text.</li>
</ul>

Console extends TextEntry:
<ul>
 <li>Offers simulation of a very basic console.  Available commands include compile, run, and debug.</li>
</ul>

TextChat extends TextEntry:
<ul>
 <li>A basic chat box for text communication between users.</li>
 <li>Timestamped entries</li>
 <li>Color-coding of usernames</li>
</ul>

The server-side application will be developed in Python and run on top of the Django web framework.
The primary responsibilities of the server-side code will be management of persistent data, providing
an administrative interface for the application, maintaining communication between users, and
facilitating AJAX communications with the client session.

The major models we will be storing are:
User: basic user information
Class: for organizing users and projects into courses and tracking professor/TA/student status
Project: details about a project, especially file storage info
Interactions: a single content item to be shared between users (e.g. a chat message, console command, etc.

The AJAX communication between the client and the server will be performed using the JSON protocol,
and facilitated with the JSONRpc Python library.

We are currently running our software on a Macbook running Ubuntu via VMWare. The database storage is via MySQL.  Our objective is to be as flexible as possible and produce software that can be installed on any server, so it will not be tied just to our setup.


<h3>Milestones:</h3>

<p>
</p>



<h3>Risks and Open Issues:</h3>

<p>
</p>

